generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar()

  users       User[]
  permissions Permission[]

  @@map("roles")
}

model Permission {
  id         Int     @id @default(autoincrement())
  action     String  @db.VarChar()
  subject    String  @db.VarChar()
  inverted   Boolean @default(false)
  conditions Json?   @db.JsonB()
  reason     String? @db.Text()

  role   Role @relation(fields: [roleId], references: [id])
  roleId Int  @map("role_id") @db.Integer()

  @@map("permissions")
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  username     String   @unique
  password     String   @map("password_hash")
  firstName    String   @map("first_name")
  lastName     String   @default("") @map("last_name")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")
  is_active    Boolean  @default(true) @map("is_active")
  refreshToken String?  @map("refresh_token")

  roleId  Int     @map("role_id") @db.Integer()
  role    Role    @relation(fields: [roleId], references: [id])
  stories Story[]

  @@map("users")
}

model Story {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar()
  content   String   @db.Text()
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  authorId Int  @map("author_id") @db.Integer()
  author   User @relation(fields: [authorId], references: [id])

  @@map("stories")
}
